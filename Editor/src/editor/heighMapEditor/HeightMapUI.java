/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.heighMapEditor;

import editor.EditorWindow;
import editor.bodyEditor.BodyModel;
import editor.common.CustomFileFilter;
import editor.common.EditorPanel;
import editor.common.ToolsGLJPanel;
import java.awt.BorderLayout;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;

/**
 * Uzivatelske rozhrani panelu pro tvorbu mapy
 * @author ggrrin_
 */
public class HeightMapUI extends EditorPanel {

    MapGLJPanel plane = new MapGLJPanel();
    JPanel toolmenu;
    JMenu menu;
    StuffMenu stuff;

    /**
     * Creates new form ConvexObjUI
     * @param w odpovidajici frame
     */
    public HeightMapUI(EditorWindow w) {
        super(w);
        initComponents();
        jPanel2.add(plane);
        initMenu();
        stuff = new StuffMenu(plane);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();

        jPanel2.setBackground(new java.awt.Color(255, 200, 100));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel4.setBackground(new java.awt.Color(200, 240, 240));

        jLabel2.setText("tool");

        jButton3.setText("objekty");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("teren");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, 0)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        resetToolbar();
        BrushTool b = plane.selectBrush();
        jLabel2.setText(jButton4.getText());
        jButton4.setEnabled(false);

        jPanel5.setLayout(new BorderLayout());
        jPanel5.add(toolmenu = new BrushMenu(b));
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        resetToolbar();
        plane.selectObjTool();
        jLabel2.setText(jButton3.getText());
        jButton3.setEnabled(false);

        jPanel5.setLayout(new BorderLayout());
        jPanel5.add(toolmenu = stuff);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void resetToolbar() {
        jButton3.setEnabled(true);
        jButton4.setEnabled(true);

        if (toolmenu != null) {
            jPanel5.remove(toolmenu);
            jPanel5.invalidate();
            jPanel5.repaint();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    // End of variables declaration//GEN-END:variables

    @Override
    public JMenu getPanelMenu() {
        return menu;
    }

    @Override
    public boolean dispose() {

        if (!askAndMove()) {
            return false;
        }
        //Custom button text
        plane.Stop();

        return true;
    }

    /**
     * Inicializuje menu panelu
     */
    private void initMenu() {
        menu = new JMenu("Map Panel");
        JMenuItem newItem = new JMenuItem("Novy ...");
        JMenuItem openItem = new JMenuItem("Otevrit...");
        JMenuItem saveItem = new JMenuItem("Ulozit...");
        JMenuItem closePan = new JMenuItem("Zavrit panel");

        menu.add(newItem);
        menu.add(openItem);
        menu.add(saveItem);
        menu.add(closePan);

        newItem.addActionListener((ActionEvent e) -> newr());
        openItem.addActionListener((ActionEvent e) -> open());
        saveItem.addActionListener((ActionEvent e) -> save());
        closePan.addActionListener((ActionEvent e) -> close());
    }

    @Override
    protected void newr() {
        if (!askAndMove()) {
            return;
        }

        SpinnerModel model1 = new SpinnerNumberModel(15, //initial value
                15, //min
                60, //max
                1);

        SpinnerModel model2 = new SpinnerNumberModel(15, //initial value
                15, //min
                60, //max
                1);

        JSpinner width = new JSpinner(model1);
        JSpinner depth = new JSpinner(model2);

        JComponent[] inputs = new JComponent[]{new JLabel("Sirka"), width, new JLabel("Hloubka"), depth};
        JOptionPane.showMessageDialog(null, inputs, "My custom dialog", JOptionPane.PLAIN_MESSAGE);

        resetToolbar();
        plane.dimensions = new Point((int) width.getValue(), (int) depth.getValue());
        plane.reset();
    }

    @Override
    protected void open() {
        if (!askAndMove()) {
            return;
        }

        stuff.list.clear();
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(new CustomFileFilter("Map object .mob", "mob"));

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            openFile(file);
        }

    }

    @Override
    public void openFile(File file) {

        try {
            plane.open(file);
            stuff.list.clear();
            for (BodyModel m : plane.map.getSubModels()) {
                stuff.list.addElement(m);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
                    "Invalid file acess",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    protected boolean save() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(new CustomFileFilter("Map object .mob", "mob"));

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            String file = fileChooser.getSelectedFile().getPath();
            if (!file.endsWith(".mob")) {
                file += ".mob";
            }

            try {
                plane.save(new File(file));
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Invalid file acess",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
            return true;
        } else {
            return false;
        }
    }

    @Override
    protected void close() {
        myEditor.selectPanel(null);
    }

    @Override
    public ToolsGLJPanel getCanvas() {
        return plane;
    }
}
