/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package editor.bodyEditor;

import editor.EditorWindow;
import editor.common.CustomFileFilter;
import editor.common.EditorPanel;
import editor.common.ToolsGLJPanel;
import editor.convexEditor.ConvexModel;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;

/**
 * UI editoru obecnych obektu
 * @author ggrrin_
 */
public class BodyUI extends EditorPanel {

    BodyGLJPanel canvas = new BodyGLJPanel();
    JMenu menu;
    DefaultListModel list = new DefaultListModel();

    CustomFileFilter filter = new CustomFileFilter("Body object .bob", "bob");

    /**
     * Creates new form ConvexObjUI
     * @param w odpovidajici frame
     */
    public BodyUI(EditorWindow w) {
        super(w);
        initComponents();
        jPanel2.add(canvas);

        initList();
        initMenu();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();

        jPanel1.setBackground(new java.awt.Color(200, 240, 240));
        jPanel1.setToolTipText("");

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList1);

        jButton1.setText("Pridat...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Odebrat");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 200, 100));
        jPanel2.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addObj();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        removeObj();
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public JMenu getPanelMenu() {
        return menu;
    }

    @Override
    public boolean dispose() {
        if (!askAndMove()) {
            return false;
        }
        //Custom button text
        canvas.Stop();

        return true;
    }

    /**
     * inicializuje seznam pouzitych subobjektu
     */
    private void initList() {
        jList1.setModel(list);
        jList1.addListSelectionListener((ListSelectionEvent e) -> {
            if (!e.getValueIsAdjusting()) {
                selectObj(jList1.getSelectedIndex());
            }
        });
    }

    /**
     * inicializuje menu panelu
     */
    private void initMenu() {
        menu = new JMenu("Body Panel");
        JMenuItem newItem = new JMenuItem("Novy ...");
        JMenuItem openItem = new JMenuItem("Otevrit...");
        JMenuItem saveItem = new JMenuItem("Ulozit...");
        JMenuItem closePan = new JMenuItem("Zavrit panel");

        menu.add(newItem);
        menu.add(openItem);
        menu.add(saveItem);
        menu.add(closePan);

        newItem.addActionListener((ActionEvent e) -> newr());
        openItem.addActionListener((ActionEvent e) -> open());
        saveItem.addActionListener((ActionEvent e) -> save());
        closePan.addActionListener((ActionEvent e) -> close());
    }

    /**
     * Vytvori dialog pro vyber souboru s obektem. Prida obekt do editoru
     */
    private void addObj() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(new CustomFileFilter("Convex object .cob", "cob"));

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();

            try {
                Object c = canvas.addConvex(file);
                list.addElement(c);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Invalid file acess",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * Odstrani vybrany obekt z editoru
     */
    private void removeObj() {
        int index = jList1.getSelectedIndex();
        jList1.clearSelection();

        if (index >= 0) {
            canvas.removeConvex(list.remove(index));
        }
    }

    /**
     * Vybere objekt
     * @param firstIndex index objektu v listu 
     */
    private void selectObj(int firstIndex) {
        //System.out.println(firstIndex);
        if (firstIndex >= 0) {
            canvas.selectConvex(list.getElementAt(firstIndex));
        } else {
            canvas.selectConvex(null);
        }
    }

    @Override
    protected void newr() {
        if (!askAndMove()) {
            return;
        }

        resetToolbar();
        canvas.reset();
    }

    @Override
    protected void open() {
        
        if (!askAndMove()) {
            return;
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(filter);

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            openFile(file);
            
        }
    }

    @Override
    public void openFile(File file) {
        try {
            canvas.open(file);
            list.clear();
            for (ConvexModel m : canvas.getModel().getSubModels()) {
                list.addElement(m);
            }

        } catch (IOException e) {
            JOptionPane.showMessageDialog(this,
                    "Invalid file acess",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    protected boolean save() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        fileChooser.addChoosableFileFilter(filter);

        if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            String file = fileChooser.getSelectedFile().getPath();
            if (!file.endsWith(".bob")) {
                file += ".bob";
            }

            try {
                canvas.save(new File(file));
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,
                        "Invalid file acess",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }

            return true;
        } else {
            return false;
        }
    }

    @Override
    protected void close() {
        myEditor.selectPanel(null);
    }

    /**
     * restart panelu
     */
    private void resetToolbar() {
        list.clear();
    }

    @Override
    public ToolsGLJPanel getCanvas() {
        return canvas;
    }

}
